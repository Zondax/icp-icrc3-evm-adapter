// Package icpDex provides a client for the "client" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package icpDex

import (
    "github.com/aviate-labs/agent-go"
    "github.com/aviate-labs/agent-go/candid/idl"
    "github.com/aviate-labs/agent-go/principal"
)

type CurrencyPair struct {
	BaseCurrency  string `ic:"base_currency" json:"base_currency"`
	QuoteCurrency string `ic:"quote_currency" json:"quote_currency"`
}

type MintOperation struct {
	Currency  string              `ic:"currency" json:"currency"`
	Amount    idl.Nat             `ic:"amount" json:"amount"`
	Recipient principal.Principal `ic:"recipient" json:"recipient"`
}

type BurnOperation struct {
	Currency string              `ic:"currency" json:"currency"`
	Amount   idl.Nat             `ic:"amount" json:"amount"`
	Owner    principal.Principal `ic:"owner" json:"owner"`
}

type Value struct {
	Blob  *[]byte                           `ic:"Blob,variant"`
	Text  *string                           `ic:"Text,variant"`
	Nat   *idl.Nat                          `ic:"Nat,variant"`
	Int   *idl.Int                          `ic:"Int,variant"`
	Array *[]Value                          `ic:"Array,variant"`
	Map   *[]struct {
	Field0 string `ic:"0" json:"0"`
	Field1 Value  `ic:"1" json:"1"`
} `ic:"Map,variant"`
}

type GetArchivesArgs struct {
	From *principal.Principal `ic:"from,omitempty" json:"from,omitempty"`
}

type GetArchivesResult struct {
	CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
	Start      idl.Nat             `ic:"start" json:"start"`
	End        idl.Nat             `ic:"end" json:"end"`
}

type GetBlocksArgs struct {
	Start  idl.Nat `ic:"start" json:"start"`
	Length idl.Nat `ic:"length" json:"length"`
}

type GetBlocksResult struct {
	LogLength      idl.Nat                                                                  `ic:"log_length" json:"log_length"`
	Blocks         []struct {
	Id    idl.Nat `ic:"id" json:"id"`
	Block Value   `ic:"block" json:"block"`
} `ic:"blocks" json:"blocks"`
	ArchivedBlocks []struct {
	Args     GetBlocksArgs                  `ic:"args" json:"args"`
	Callback struct { /* NOT SUPPORTED */ } `ic:"callback" json:"callback"`
} `ic:"archived_blocks" json:"archived_blocks"`
}

type DataCertificate struct {
	Certificate []byte `ic:"certificate" json:"certificate"`
	HashTree    []byte `ic:"hash_tree" json:"hash_tree"`
}

// Agent is a client for the "client" canister.
type Agent struct {
    *agent.Agent
    CanisterId principal.Principal
}

// NewAgent creates a new agent for the "client" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
    a, err := agent.New(config)
    if err != nil {
        return nil, err
    }
    return &Agent{
        Agent:      a,
        CanisterId: canisterId,
    }, nil
}

// AddCurrencyPair calls the "add_currency_pair" method on the "client" canister.
func (a Agent) AddCurrencyPair(arg0 CurrencyPair) error {
    if err := a.Agent.Call(
        a.CanisterId,
        "add_currency_pair",
        []any{arg0},
        []any{},
    ); err != nil {
        return err
    }
    return nil
}

// GetCurrencyPairs calls the "get_currency_pairs" method on the "client" canister.
func (a Agent) GetCurrencyPairs() (*[]CurrencyPair, error) {
    var r0 []CurrencyPair
    if err := a.Agent.Query(
        a.CanisterId,
        "get_currency_pairs",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// MintTokens calls the "mint_tokens" method on the "client" canister.
func (a Agent) MintTokens(arg0 MintOperation) (*struct {
	Ok  *idl.Null `ic:"Ok,variant"`
	Err *string   `ic:"Err,variant"`
}, error) {
    var r0 struct {
	Ok  *idl.Null `ic:"Ok,variant"`
	Err *string   `ic:"Err,variant"`
}
    if err := a.Agent.Call(
        a.CanisterId,
        "mint_tokens",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// BurnTokens calls the "burn_tokens" method on the "client" canister.
func (a Agent) BurnTokens(arg0 BurnOperation) (*struct {
	Ok  *idl.Null `ic:"Ok,variant"`
	Err *string   `ic:"Err,variant"`
}, error) {
    var r0 struct {
	Ok  *idl.Null `ic:"Ok,variant"`
	Err *string   `ic:"Err,variant"`
}
    if err := a.Agent.Call(
        a.CanisterId,
        "burn_tokens",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// GetTokenBalance calls the "get_token_balance" method on the "client" canister.
func (a Agent) GetTokenBalance(arg0 principal.Principal, arg1 string) (*idl.Nat, error) {
    var r0 idl.Nat
    if err := a.Agent.Query(
        a.CanisterId,
        "get_token_balance",
        []any{arg0, arg1},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3GetArchives calls the "icrc3_get_archives" method on the "client" canister.
func (a Agent) Icrc3GetArchives(arg0 GetArchivesArgs) (*GetArchivesResult, error) {
    var r0 GetArchivesResult
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_get_archives",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3GetTipCertificate calls the "icrc3_get_tip_certificate" method on the "client" canister.
func (a Agent) Icrc3GetTipCertificate() (**DataCertificate, error) {
    var r0 *DataCertificate
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_get_tip_certificate",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3GetBlocks calls the "icrc3_get_blocks" method on the "client" canister.
func (a Agent) Icrc3GetBlocks(arg0 GetBlocksArgs) (*GetBlocksResult, error) {
    var r0 GetBlocksResult
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_get_blocks",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3SupportedBlockTypes calls the "icrc3_supported_block_types" method on the "client" canister.
func (a Agent) Icrc3SupportedBlockTypes() (*[]struct {
	BlockType string `ic:"block_type" json:"block_type"`
	Url       string `ic:"url" json:"url"`
}, error) {
    var r0 []struct {
	BlockType string `ic:"block_type" json:"block_type"`
	Url       string `ic:"url" json:"url"`
}
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_supported_block_types",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}
