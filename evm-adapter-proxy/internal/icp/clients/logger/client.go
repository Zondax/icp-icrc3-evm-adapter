// Package icpLogger provides a client for the "client" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package icpLogger

import (
    "github.com/aviate-labs/agent-go"
    "github.com/aviate-labs/agent-go/candid/idl"
    "github.com/aviate-labs/agent-go/principal"
)

type Value struct {
	Blob  *[]byte                           `ic:"Blob,variant"`
	Text  *string                           `ic:"Text,variant"`
	Nat   *idl.Nat                          `ic:"Nat,variant"`
	Int   *idl.Int                          `ic:"Int,variant"`
	Array *[]Value                          `ic:"Array,variant"`
	Map   *[]struct {
	Field0 string `ic:"0" json:"0"`
	Field1 Value  `ic:"1" json:"1"`
} `ic:"Map,variant"`
}

type Block struct {
	Id        idl.Nat `ic:"id" json:"id"`
	Hash      []byte  `ic:"hash" json:"hash"`
	Phash     []byte  `ic:"phash" json:"phash"`
	Btype     string  `ic:"btype" json:"btype"`
	Ts        uint64  `ic:"ts" json:"ts"`
	Entries   []Value `ic:"entries" json:"entries"`
	Finalized bool    `ic:"finalized" json:"finalized"`
}

type LogEntry struct {
	Timestamp uint64 `ic:"timestamp" json:"timestamp"`
	Operation string `ic:"operation" json:"operation"`
	Details   Value  `ic:"details" json:"details"`
	Caller    string `ic:"caller" json:"caller"`
}

type GetArchivesArgs struct {
	From *principal.Principal `ic:"from,omitempty" json:"from,omitempty"`
}

type GetArchivesResult = []struct {
	CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
	Start      idl.Nat             `ic:"start" json:"start"`
	End        idl.Nat             `ic:"end" json:"end"`
}

type GetBlocksArgs struct {
	Start  idl.Nat `ic:"start" json:"start"`
	Length idl.Nat `ic:"length" json:"length"`
}

type GetBlocksResult struct {
	LogLength      idl.Nat                                  `ic:"log_length" json:"log_length"`
	Blocks         []struct {
	Id    idl.Nat `ic:"id" json:"id"`
	Block Value   `ic:"block" json:"block"`
} `ic:"blocks" json:"blocks"`
	ArchivedBlocks []ArchivedBlock                          `ic:"archived_blocks" json:"archived_blocks"`
}

type ArchivedBlock struct {
	Args     GetBlocksArgs                  `ic:"args" json:"args"`
	Callback struct { /* NOT SUPPORTED */ } `ic:"callback" json:"callback"`
}

type DataCertificate struct {
	Certificate []byte `ic:"certificate" json:"certificate"`
	HashTree    []byte `ic:"hash_tree" json:"hash_tree"`
}

type BlockTypeInfo struct {
	BlockType string `ic:"block_type" json:"block_type"`
	Url       string `ic:"url" json:"url"`
}

// Agent is a client for the "client" canister.
type Agent struct {
    *agent.Agent
    CanisterId principal.Principal
}

// NewAgent creates a new agent for the "client" canister.
func NewAgent(canisterId principal.Principal, config agent.Config) (*Agent, error) {
    a, err := agent.New(config)
    if err != nil {
        return nil, err
    }
    return &Agent{
        Agent:      a,
        CanisterId: canisterId,
    }, nil
}

// AddEntry calls the "add_entry" method on the "client" canister.
func (a Agent) AddEntry(arg0 string, arg1 Value, arg2 principal.Principal) error {
    if err := a.Agent.Call(
        a.CanisterId,
        "add_entry",
        []any{arg0, arg1, arg2},
        []any{},
    ); err != nil {
        return err
    }
    return nil
}

// GetLogs calls the "get_logs" method on the "client" canister.
func (a Agent) GetLogs() (*[]LogEntry, error) {
    var r0 []LogEntry
    if err := a.Agent.Query(
        a.CanisterId,
        "get_logs",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// ChainId calls the "chain_id" method on the "client" canister.
func (a Agent) ChainId() (*string, error) {
    var r0 string
    if err := a.Agent.Query(
        a.CanisterId,
        "chain_id",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// NetVersion calls the "net_version" method on the "client" canister.
func (a Agent) NetVersion() (*string, error) {
    var r0 string
    if err := a.Agent.Query(
        a.CanisterId,
        "net_version",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3GetArchives calls the "icrc3_get_archives" method on the "client" canister.
func (a Agent) Icrc3GetArchives(arg0 GetArchivesArgs) (*GetArchivesResult, error) {
    var r0 GetArchivesResult
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_get_archives",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3GetTipCertificate calls the "icrc3_get_tip_certificate" method on the "client" canister.
func (a Agent) Icrc3GetTipCertificate() (**DataCertificate, error) {
    var r0 *DataCertificate
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_get_tip_certificate",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3GetBlocks calls the "icrc3_get_blocks" method on the "client" canister.
func (a Agent) Icrc3GetBlocks(arg0 GetBlocksArgs) (*GetBlocksResult, error) {
    var r0 GetBlocksResult
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_get_blocks",
        []any{arg0},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}

// Icrc3SupportedBlockTypes calls the "icrc3_supported_block_types" method on the "client" canister.
func (a Agent) Icrc3SupportedBlockTypes() (*[]struct {
	BlockType string `ic:"block_type" json:"block_type"`
	Url       string `ic:"url" json:"url"`
}, error) {
    var r0 []struct {
	BlockType string `ic:"block_type" json:"block_type"`
	Url       string `ic:"url" json:"url"`
}
    if err := a.Agent.Query(
        a.CanisterId,
        "icrc3_supported_block_types",
        []any{},
        []any{&r0},
    ); err != nil {
        return nil, err
    }
    return &r0, nil
}
